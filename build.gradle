plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.1.0'
    //https://github.com/qoomon/gradle-git-versioning-plugin
    id 'me.qoomon.git-versioning' version '6.3.6'
    id 'jacoco'
}

group = 'com.greenfoxacademy'
version = 'This is basically placeholder text at this point'
gitVersioning.apply {
    refs {
        considerTagsOnBranches = true
        tag('v(?<version>.*)') {
            version = '${describe.tag}-SNAPSHOT'
        }
        branch('.+') {
            version = '${ref}_${commit.short}-SNAPSHOT'
        }
    }

    // optional fallback configuration in case of no matching ref configuration
    rev {
        version = '${commit.short}-SNAPSHOT'
    }
}
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    implementation 'org.flywaydb:flyway-mysql'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
    testRuntimeOnly 'com.h2database:h2-mvstore:2.1.210'
}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = false
        csv.required = false
        html.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, includes: [
                    "**/controllers/*",
                    "**/services/*"
            ])
        }))
    }
}


jacocoTestCoverageVerification {
    dependsOn test
    violationRules {
        rule {
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.5
            }
        }
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, includes: [
                    "**/controllers/*",
                    "**/services/*"
            ])
        }))
    }
}
